Цикл for

В Python есть еще одна конструкция для реализации циклов - цикл for.

for element in <список>:
    <блок кода>
    break
для каждого элемента списка <список>
присвой element элемент списка (имя переменной может быть любым)
выполни <блок кода>
если встретишь break, прервись (необязательное условие).
Примеры использования цикла for:

for i in [4, 5, 6]:
   print(i)



for i in [4, 5, 6]:
    if i % 2 == 0: # остаток от деления
        print(i)

#нахождение суммы элементов списка array
sum = 0
array = [45, 7, -934, 0, 2839]
for i in array:
   sum += i
print(sum)

Функции

Часто при работе вы будете сталкиваться с ситуациями, когда в вашей программе один и тот же код необходимо будет выполнять несколько раз.Такие части кода принято оформлять в функции. Мы уже сталкивались со стандартными функциями в Python. Например, print(), len (), sum ().

Мы можем написать свои функции. Например, функцию func_sum, которая на вход получает 2 числа и возвращает их сумму:

def func_sum (a, b): #определение функции
   sum = a + b #тело функции
   return sum #возвращаемое значение
 
x = func_sum(5, 9) #вызов функции, в x записывается результат вызова функции
Использование сторонних библиотек

Обычно все лучшие решения наиболее популярных задач оформляются в виде библиотек. Чтобы “не изобретать велосипед”, программисты используют готовые решения для своих задач.

По ссылкам можно получить информацию о библиотеках.
https://docs.python.org/3/library/index.html - стандартные библиотеки Python.
https://pypi.org/ - каталог third-party библиотек.

Для вызова библиотек используется следующий синтаксис:
import <lib> - подключить (использовать) библиотеку lib.
from <lib> import my_func - из библиотеки <lib> использовать объект my_func.
Пример использования стандартной библиотеки math:

import math #подключаем библиотеку math
math.sin(0) #вызываем функцию sin из библиотеки math
